{"version":3,"sources":["storage/index.ts","services/RequestService.ts","services/ResponseService.ts","services/TabService.ts","services/HistoryService.ts","stores/historyStore/index.ts","components/Aside/Histories.tsx","containers/AsideContainer.tsx","stores/responseStore/index.ts","components/Response/ResponseBody.tsx","containers/ResponseContainer.tsx","stores/requestStore/index.ts","components/Request/styles.ts","components/Common/Dialog.tsx","components/Common/Button.tsx","components/Common/Alert.tsx","components/Common/Input.tsx","utils/index.ts","components/Request/RequestAddress.tsx","reset.style.ts","components/Request/RequestTable.tsx","components/Request/RequestParams.tsx","components/Request/RequestHeaders.tsx","components/Request/RequestBody.tsx","components/Request/RequestConfig.tsx","containers/RequestContainer.tsx","containers/AppContainer.tsx","serviceWorker.ts","index.tsx"],"names":["Object","freeze","get","key","JSON","parse","localStorage","getItem","set","value","setItem","stringify","fetchAll","storage","put","histories","push","history","this","remove","index","splice","historyState","atom","default","HistoryService","historiesStyle","css","titleStyle","noneStyles","Histories","useRecoilValue","length","map","v","AsideContainer","className","responseState","undefined","ResponseBody","response","data","noneBlockStyles","ResponseContainer","responseContainerStyles","responseTitleStyles","methods","configTabs","methodState","tabState","headersState","paramsState","addressStyle","commonInputStyle","selectStyle","addressInputStyle","buttonStyle","tabStyle","requestTableStyles","Dialog","children","overrideCss","width","onClose","dialogStyles","defaultDialogStyles","wrapperStyles","close","onClick","e","stopPropagation","closeButtonStyles","defaultButtonStyles","Button","props","extendedStyles","alertDom","document","createElement","Alert","Input","urlRule","validateURL","url","test","RequestAddress","submitRequest","useRecoilState","method","setMethod","useState","requestURL","setRequestURL","isDisabled","setDisabled","submit","onChange","target","type","onKeyDown","keyCode","disabled","listResetStyle","paragraphResetStyle","allResetStyle","inputStyles","RequestTable","setData","changeDataOfIndex","property","newDataList","placeholder","RequestParams","RequestHeaders","RequestBody","RequestConfig","activeTab","setActiveTab","tabName","RequestContainer","setResponse","useSetRecoilState","setHistories","params","headers","headerList","queryParams","filter","trim","includes","encodeURIComponent","join","getQueryParamsOf","axios","reduce","then","catch","console","error","message","body","appendChild","ReactDOM","render","toString","AppContainer","Boolean","window","location","hostname","match","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.187c8412.chunk.js","sourcesContent":["export default Object.freeze({\r\n\r\n  get: <T>(key: string): T|null =>\r\n    JSON.parse(localStorage.getItem(key) || 'null'),\r\n\r\n  set: <T>(key: string, value: T) =>\r\n    localStorage.setItem(key, JSON.stringify(value))\r\n\r\n});","export default Object.freeze({\r\n\r\n});","export default Object.freeze({\r\n\r\n});","export default Object.freeze({\r\n\r\n});","import storage from 'storage';\r\n\r\nconst STORAGE_KEY: string = 'histories';\r\n\r\nexport default Object.freeze({\r\n\r\n  fetchAll (): string[] {\r\n    return storage.get<string[]>(STORAGE_KEY) || [];\r\n  },\r\n\r\n  put (histories: string[]) {\r\n    storage.set<string[]>(STORAGE_KEY, histories);\r\n  },\r\n\r\n  push (history: string) {\r\n    const histories: string[] = this.fetchAll();\r\n    histories.push(history);\r\n    this.put(histories);\r\n  },\r\n\r\n  remove (index: number) {\r\n    const histories: string[] = this.fetchAll();\r\n    histories.splice(index, 1);\r\n    this.put(histories);\r\n  }\r\n\r\n});","import { atom, RecoilState } from \"recoil\";\r\nimport { HistoryService } from \"services\";\r\n\r\nexport const historyState: RecoilState<string[]> = atom({\r\n  key: 'historyState',\r\n  default: HistoryService.fetchAll()\r\n});","/** @jsx jsx */\r\nimport {css, jsx} from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport {useRecoilValue} from \"recoil\";\r\nimport {historyState} from \"../../stores/historyStore\";\r\n\r\nconst historiesStyle = css`\r\n  ul, li {\r\n    list-style: none;\r\n  }\r\n  \r\n  ul {\r\n    margin: 0;\r\n    padding: 5px 0;\r\n  }\r\n  \r\n  li {\r\n    word-break: break-all;\r\n    margin: 0;\r\n    padding: 5px;\r\n  }\r\n`;\r\n\r\nconst titleStyle = css`\r\n  border-bottom: 2px solid #06F;\r\n  padding: 15px;\r\n  margin: 0;\r\n  font-size: 21px;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst noneStyles = css`\r\n  text-align: center;\r\n  font-size: 13px;\r\n  color: #666;\r\n`;\r\n\r\nexport const Histories: React.FC = () => {\r\n  const histories = useRecoilValue(historyState);\r\n  return (\r\n    <section css={historiesStyle}>\r\n      <h2 css={titleStyle}>History</h2>\r\n      { histories.length > 0 ?\r\n        <ul>\r\n          {histories.map((v, key) => (\r\n            <li key={key}>\r\n              {v}\r\n            </li>\r\n          ))}\r\n        </ul> :\r\n        <p css={noneStyles}>검색 내역이 없습니다.</p>\r\n      }\r\n    </section>\r\n  );\r\n}","import React from \"react\";\r\nimport { Histories } from \"../components/Aside/Histories\";\r\n\r\nexport const AsideContainer: React.FC = () => {\r\n  return (\r\n    <aside className=\"asideContainer\">\r\n      <Histories />\r\n    </aside>\r\n  );\r\n}","import {atom, RecoilState} from \"recoil\";\r\n\r\nexport const responseState: RecoilState<any> = atom({\r\n  key: 'responseState',\r\n  default: undefined\r\n})","import React from \"react\";\r\nimport Highlight from \"react-highlight\";\r\nimport {css} from \"@emotion/core\";\r\nimport {AxiosResponse} from \"axios\";\r\n\r\nexport interface IResponseBodyProps {\r\n  response?: AxiosResponse\r\n}\r\n\r\nexport const ResponseBody: React.FC<IResponseBodyProps> = ({ response }: IResponseBodyProps) => {\r\n  return (\r\n    <>\r\n      {\r\n        response ?\r\n          <Highlight>\r\n            { JSON.stringify(response.data, null, 4) }\r\n          </Highlight> :\r\n          <p css={noneBlockStyles}>아직 Request를 보내지 않았습니다.</p>\r\n      }\r\n    </>\r\n  );\r\n}\r\n\r\nexport const noneBlockStyles = css`\r\n  margin: 0 15px 15px;\r\n  background: #f5f5f5;\r\n  padding: 20px;\r\n  text-align: center;\r\n  color: #666;\r\n  border-radius: 3px;\r\n  border: 1px solid #ddd;\r\n  font-size: 13px;\r\n`;","/** @jsx jsx **/\r\nimport {css, jsx} from '@emotion/core';\r\nimport React from \"react\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { responseState } from \"stores/responseStore\";\r\nimport { ResponseBody } from \"../components/Response/ResponseBody\";\r\n\r\nexport const ResponseContainer: React.FC = () => {\r\n\r\n  const response = useRecoilValue(responseState);\r\n\r\n  return (\r\n    <section css={responseContainerStyles}>\r\n      <h2 css={responseTitleStyles}>Response</h2>\r\n      <ResponseBody response={response} />\r\n    </section>\r\n  );\r\n}\r\n\r\n\r\n\r\nexport const responseContainerStyles = css`\r\n  border-top: 1px solid #ddd;\r\n  overflow: auto;\r\n`;\r\n\r\nexport const responseTitleStyles = css`\r\n  font-size: 21px;\r\n  margin: 0;\r\n  padding: 15px;\r\n  font-weight: 400;\r\n`;","import { atom, RecoilState } from \"recoil\";\r\nimport { Method } from \"axios\";\r\n\r\nexport interface IRequestTable {\r\n  key: string\r\n  value: string\r\n}\r\n\r\nexport const methods: Method[] = [ 'GET', 'POST', 'PUT', 'PATCH', 'DELETE' ];\r\nexport const configTabs: string[] = ['Params', 'Headers', 'Body'];\r\n\r\nexport const methodState: RecoilState<Method> = atom({\r\n  key: 'methodState',\r\n  default: methods[0]\r\n});\r\n\r\nexport const tabState: RecoilState<number> = atom({\r\n  key: 'tabState',\r\n  default: 0\r\n});\r\n\r\nconst headers: IRequestTable[] = [];\r\nexport const headersState: RecoilState<IRequestTable[]> = atom({\r\n  key: 'headersState',\r\n  default: headers\r\n});\r\n\r\nconst params: IRequestTable[] = [];\r\nexport const paramsState: RecoilState<IRequestTable[]> = atom({\r\n  key: 'paramsState',\r\n  default: params\r\n});","import { css } from \"@emotion/core\";\r\n\r\nexport const addressStyle = css`\r\n  padding: 10px;\r\n  border-bottom: 1px solid #ddd;\r\n  display: flex;\r\n`;\r\n\r\nconst commonInputStyle = css`\r\n  border: 1px solid #bbb;\r\n  background: #f5f5f5;\r\n  border-radius: 2px;\r\n  font-size: 13px;\r\n  height: 36px;\r\n  padding: 0 10px;\r\n  box-sizing: border-box;\r\n  transition: background-color 0.15s;\r\n  \r\n  &:focus {\r\n    background: #fff;\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport const selectStyle = css`\r\n  ${commonInputStyle}\r\n  border-radius: 3px 0 0 3px;\r\n  width: 100px;\r\n`;\r\n\r\nexport const addressInputStyle = css`\r\n  ${commonInputStyle}\r\n  border-radius: 0 3px 3px 0;\r\n  margin-left: -1px;\r\n  width: calc(100% - 190px);\r\n`;\r\n\r\nexport const buttonStyle = css`\r\n  margin-left: 5px;\r\n  width: 85px;\r\n  font-weight: bold;\r\n  height: 36px;\r\n  padding: 0 10px;\r\n`;\r\n\r\nexport const tabStyle = css`\r\n  && {\r\n    display: flex;\r\n    border-bottom: 1px dotted #ddd;\r\n    padding: 0 10px;\r\n    \r\n    li {\r\n      padding: 15px 10px;\r\n      position: relative;\r\n      color: #aaa;\r\n      font-size: 13px;\r\n      cursor: pointer;\r\n      transition: color 0.3s;\r\n      \r\n      &::after {\r\n        content: \"\";\r\n        display: block;\r\n        position: absolute;\r\n        left: 50%;\r\n        right: 50%;\r\n        height: 3px;\r\n        background: #06F;\r\n        bottom: -1px;\r\n        transition-property: left, right;\r\n        transition-duration: 0.3s;\r\n      }\r\n      \r\n      &:hover {\r\n        color: #000;\r\n      }\r\n      \r\n      &.active {\r\n        color: #000;\r\n        &::after {\r\n          left: 0;\r\n          right: 0;\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const requestTableStyles = css`\r\n  && {\r\n    padding: 20px;\r\n    \r\n    .noneData {\r\n      background: #f5f5f5;\r\n      border-radius: 3px;\r\n      border: 1px solid #ddd;\r\n      padding: 20px 0;\r\n      text-align: center;\r\n      color: #666;\r\n      font-size: 13px;\r\n    }\r\n    \r\n    ul {\r\n      max-width: 1000px;\r\n    }\r\n    \r\n    li {\r\n      margin-bottom: 5px;\r\n    }\r\n  }\r\n`;","/** @jsx jsx **/\r\nimport {css, jsx, SerializedStyles} from \"@emotion/core\";\r\nimport React from \"react\";\r\n\r\nexport interface IDialogProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  overrideCss?: SerializedStyles\r\n  width?: number\r\n  opened?: boolean\r\n  onClose: () => void\r\n}\r\n\r\nexport const Dialog: React.FC<IDialogProps> = ({ children, overrideCss, width = 700, onClose }: IDialogProps) => {\r\n\r\n  const dialogStyles = css`\r\n    ${defaultDialogStyles}\r\n    ${overrideCss}\r\n  `;\r\n\r\n  const wrapperStyles = css`\r\n    width: ${width}px;\r\n  `;\r\n\r\n  const close = () => onClose();\r\n\r\n  return (\r\n    <div css={dialogStyles} onClick={close}>\r\n      <div css={wrapperStyles} onClick={e => e.stopPropagation()}>\r\n        <button css={closeButtonStyles} onClick={close}>×</button>\r\n        { children }\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\nconst defaultDialogStyles = css`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  top: 0;\r\n  background-color: rgba(0, 0, 0, 0.3);\r\n  z-index: 100;\r\n  cursor: pointer;\r\n  \r\n  > div {\r\n    background-color: #fff;\r\n    margin: 100px auto 0;\r\n    padding: 15px;\r\n    border-radius: 3px;\r\n    position: relative;\r\n    box-shadow: 0 0 10px rgba(0,0,0, 0.2);\r\n    cursor: default;\r\n  }\r\n`;\r\n\r\nconst closeButtonStyles = css`\r\n  position: absolute;\r\n  right: 0;\r\n  top: 0;\r\n  border: none;\r\n  cursor: pointer;\r\n  background-color: #666;\r\n  color: #fff;\r\n  width: 20px;\r\n  height: 20px;\r\n  border-radius: 3px;\r\n  transition: background-color 0.3s;\r\n  \r\n  &:hover, &:focus {\r\n    background-color: #000;\r\n    outline: none;\r\n  }\r\n`;","/** @jsx jsx **/\r\nimport {jsx, css, SerializedStyles} from \"@emotion/core\";\r\nimport React from \"react\";\r\n\r\nconst defaultButtonStyles = css`\r\n  border: none;\r\n  border-radius: 2px;\r\n  background-color: #09F;\r\n  color: #fff;\r\n  padding: 7px 10px;\r\n  transition-property: background-color, opacity;\r\n  transition-duration: 0.2s;\r\n  box-sizing: border-box;\r\n  \r\n  &:not(:disabled) {\r\n    &:hover,\r\n    &:focus {\r\n      background-color: #06F;\r\n      outline: none;\r\n    }\r\n  }\r\n  \r\n  &:disabled {\r\n    opacity: 0.5\r\n  }\r\n`;\r\n\r\nexport interface IButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\r\n  overrideCss?: SerializedStyles\r\n}\r\n\r\nexport const Button: React.FC<IButtonProps> = ({ overrideCss, ...props }: IButtonProps) => {\r\n  const extendedStyles = css`\r\n    ${defaultButtonStyles}\r\n    ${overrideCss}\r\n  `;\r\n  return (\r\n    <button\r\n      { ...props }\r\n      css={extendedStyles}\r\n    >\r\n      {props.children}\r\n    </button>\r\n  );\r\n}","/** @jsx jsx **/\r\nimport {css, jsx} from \"@emotion/core\";\r\nimport React  from \"react\";\r\nimport ReactDOM from 'react-dom';\r\nimport { Dialog } from \"./Dialog\";\r\nimport { Button} from \"./Button\";\r\n\r\nconst alertDom = document.createElement('div');\r\n\r\nexport interface IAlertProps extends React.HTMLAttributes<HTMLDivElement> {\r\n  onClose: () => void\r\n}\r\n\r\nexport const Alert: React.FC<IAlertProps> = ({ children, onClose }: IAlertProps) => {\r\n  return (\r\n    <Dialog width={300} onClose={onClose}>\r\n      { children }\r\n      <div css={css`\r\n        margin-top: 10px;\r\n        text-align: right;\r\n      `}>\r\n        <Button onClick={() => onClose()}>\r\n          확인\r\n        </Button>\r\n      </div>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport const message = (message: string) => {\r\n  document.body.appendChild(alertDom);\r\n  const close = () => alertDom.remove();\r\n  ReactDOM.render(\r\n    <Alert onClose={close}>\r\n      {message}\r\n    </Alert>,\r\n    alertDom\r\n  );\r\n}","/** @jsx jsx **/\r\nimport {css, jsx, SerializedStyles} from \"@emotion/core\";\r\nimport React from \"react\";\r\n\r\nconst defaultInputStyles = `\r\n  padding: 10px;\r\n  background: #fff;\r\n  border-radius: 2px;\r\n  border: 1px solid #bbb;\r\n  font-size: 13px;\r\n  box-sizing: border-box;\r\n  \r\n  + input,\r\n  + button,\r\n  + select {\r\n    margin-left: 5px;\r\n  }\r\n  \r\n  &:focus {\r\n    outline: none;\r\n  }\r\n`;\r\n\r\nexport interface IInputProps extends React.InputHTMLAttributes<HTMLInputElement> {\r\n  overrideCss?: SerializedStyles\r\n}\r\n\r\nexport const Input: React.FC<IInputProps> = ({ overrideCss, ...props }: IInputProps) => {\r\n  return (\r\n    <input\r\n      {...props}\r\n      css={css`\r\n        ${defaultInputStyles}\r\n        ${overrideCss}\r\n      `}\r\n    />\r\n  );\r\n}","import { IRequestTable } from \"../stores/requestStore\";\r\n\r\nconst urlRule = /^https?:\\/\\/([a-zA-Z0-9가-힣._-]+\\.)?[a-zA-Z0-9]+(:[0-9]{2,5})?/\r\nexport const validateURL = (url: string) => {\r\n  return url.length > 0 && urlRule.test(url);\r\n}\r\n\r\nexport const getQueryParamsOf = (params: IRequestTable[]) => {\r\n  const queryParams = params.filter(({ key, value }) => ![key.trim(), value.trim()].includes(''))\r\n                            .map(({ key, value }) => `${key}=${encodeURIComponent(value)}`).join('&');\r\n\r\n  return queryParams.length ? `?${queryParams}` : '';\r\n}\r\n\r\nexport const getHeadersOf = (headerList: IRequestTable[]): { [k: string]: string } =>\r\n  headerList.filter(({ key, value }) => ![key.trim(), value.trim()].includes('') )\r\n            .reduce((headers, { key, value }) => ({\r\n              ...headers,\r\n              [key]: value\r\n            }), {});","/** @jsx jsx */\r\nimport { jsx } from '@emotion/core';\r\nimport React, {useState} from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { methodState, methods } from \"stores/requestStore\";\r\nimport { selectStyle, addressInputStyle, addressStyle, buttonStyle } from \"./styles\";\r\nimport { Button } from \"components/Common\";\r\nimport { validateURL } from \"utils\";\r\nimport { Method } from \"axios\";\r\n\r\nexport interface IRequestAddressProps {\r\n  submitRequest: (requestURL: string) => void\r\n}\r\n\r\nexport const RequestAddress: React.FC<IRequestAddressProps> = ({ submitRequest }: IRequestAddressProps) => {\r\n\r\n  const [ method, setMethod ] = useRecoilState(methodState);\r\n  const [ requestURL, setRequestURL ] = useState('');\r\n  const [ isDisabled, setDisabled ] = useState(true);\r\n\r\n  const changeMethod = ({ target }: React.ChangeEvent<HTMLSelectElement>) => {\r\n    setMethod(target.value as Method);\r\n  }\r\n\r\n  const updateUrl = ({ target }: React.ChangeEvent<HTMLInputElement>) => {\r\n    setRequestURL(target.value);\r\n    setDisabled(!validateURL(requestURL));\r\n  }\r\n\r\n  const submitOnEnter = ({ keyCode }: React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (keyCode === 13) {\r\n      submit();\r\n    }\r\n  }\r\n\r\n  const submit = () => {\r\n    if (!validateURL(requestURL)) {\r\n      return setDisabled(true);\r\n    }\r\n    submitRequest(requestURL);\r\n  }\r\n\r\n  return (\r\n    <div css={addressStyle}>\r\n      <select\r\n        value={method}\r\n        onChange={changeMethod}\r\n        css={selectStyle}\r\n      >\r\n        { methods.map((v, key) =>\r\n          <option value={v} key={key}>{v}</option>)\r\n        }\r\n      </select>\r\n\r\n      <input\r\n        type=\"text\"\r\n        css={addressInputStyle}\r\n        onChange={updateUrl}\r\n        onKeyDown={submitOnEnter}\r\n      />\r\n\r\n      <Button\r\n        type=\"button\"\r\n        overrideCss={buttonStyle}\r\n        onClick={submit}\r\n        disabled={isDisabled}\r\n        children=\"Send\" />\r\n    </div>\r\n  );\r\n}","import { css } from \"@emotion/core\";\r\n\r\nexport const listResetStyle = css`\r\n  ul, li {\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport const paragraphResetStyle = css`\r\n  p {\r\n    margin: 0;\r\n    padding: 0;\r\n  }\r\n`;\r\n\r\nexport const allResetStyle = css`\r\n  ${listResetStyle}\r\n  ${paragraphResetStyle}\r\n`;","/** @jsx jsx **/\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport { IRequestTable } from \"stores/requestStore\";\r\nimport { SetterOrUpdater } from \"recoil\";\r\nimport { requestTableStyles } from './styles';\r\nimport { Button, Input } from \"components/Common\";\r\n\r\ninterface RequestTableProps {\r\n  data: IRequestTable[],\r\n  setData: SetterOrUpdater<IRequestTable[]>\r\n}\r\n\r\nconst inputStyles = css`\r\n  width: calc(50% - 2.5px)  \r\n`;\r\n\r\nexport const RequestTable: React.FC<RequestTableProps> = ({ data, setData }: RequestTableProps) => {\r\n\r\n  const addData = () => setData([\r\n    ...data,\r\n    { key: '', value: '' }\r\n  ]);\r\n\r\n  const changeDataOfIndex = (property: string, index: number) => (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newDataList: IRequestTable[] = [ ...data ];\r\n    newDataList[index] = {...newDataList[index], [property]: e.target.value};\r\n    setData(newDataList);\r\n  }\r\n\r\n  return (\r\n    <div css={requestTableStyles}>\r\n      { data.length !== 0 ?\r\n        <ul>\r\n          { data.map(({ key, value }, index) =>\r\n            <li key={index}>\r\n              <Input\r\n                type=\"text\"\r\n                value={key}\r\n                onChange={changeDataOfIndex('key', index)}\r\n                overrideCss={inputStyles}\r\n                placeholder=\"key\" />\r\n              <Input\r\n                type=\"text\"\r\n                value={value}\r\n                onChange={changeDataOfIndex('value', index)}\r\n                overrideCss={inputStyles}\r\n                placeholder=\"value\" />\r\n            </li>\r\n          ) }\r\n        </ul> :\r\n        <p className=\"noneData\">현재 등록된 파라미터가 없습니다.</p>\r\n      }\r\n      <div css={css`margin-top: 10px;`}>\r\n        <Button\r\n          type=\"button\"\r\n          onClick={addData}\r\n          children=\"추가\" />\r\n      </div>\r\n    </div>\r\n  )\r\n};","import React from \"react\";\r\nimport {RequestTable} from \"./RequestTable\";\r\nimport {useRecoilState} from \"recoil\";\r\nimport {paramsState} from \"stores/requestStore\";\r\n\r\nexport const RequestParams: React.FC = () => {\r\n  const [ data, setData ] = useRecoilState(paramsState);\r\n\r\n  return (\r\n    <article>\r\n      <RequestTable\r\n        data={data}\r\n        setData={setData} />\r\n    </article>\r\n  )\r\n};","import React from \"react\";\r\nimport { RequestTable } from \"./RequestTable\";\r\nimport { headersState } from \"stores/requestStore\";\r\nimport { useRecoilState } from \"recoil\";\r\n\r\nexport const RequestHeaders: React.FC = () => {\r\n  const [ data, setData ] = useRecoilState(headersState);\r\n\r\n  return (\r\n    <article>\r\n      <RequestTable\r\n        data={data}\r\n        setData={setData} />\r\n    </article>\r\n  )\r\n};","import React from \"react\";\r\n\r\nexport const RequestBody: React.FC = () => (\r\n  <article>\r\n  </article>\r\n);","/** @jsx jsx */\r\nimport { jsx } from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport { allResetStyle } from \"reset.style\";\r\nimport { tabStyle } from \"./styles\";\r\nimport { configTabs, tabState } from \"stores/requestStore\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { RequestParams } from \"./RequestParams\";\r\nimport { RequestHeaders } from \"./RequestHeaders\";\r\nimport { RequestBody } from \"./RequestBody\";\r\n\r\nexport const RequestConfig: React.FC = () => {\r\n\r\n  const [activeTab, setActiveTab] = useRecoilState(tabState);\r\n\r\n  return (\r\n    <div css={allResetStyle}>\r\n      <ul css={tabStyle}>\r\n        {configTabs.map((tabName, key) =>\r\n          <li\r\n            key={key}\r\n            className={key === activeTab ? 'active' : ''}\r\n            onClick={() => setActiveTab(key)}\r\n          >\r\n            {tabName}\r\n          </li>\r\n        )}\r\n      </ul>\r\n      {\r\n        activeTab === 0 ? <RequestParams /> :\r\n        activeTab === 1 ? <RequestHeaders /> :\r\n        activeTab === 2 ? <RequestBody /> :\r\n        ''\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","/** @jsx jsx **/\r\nimport { css, jsx } from \"@emotion/core\";\r\nimport React from \"react\";\r\nimport axios from 'axios';\r\nimport { RequestAddress } from \"../components/Request/RequestAddress\";\r\nimport { RequestConfig } from \"../components/Request/RequestConfig\";\r\nimport { getHeadersOf, getQueryParamsOf } from \"utils\";\r\nimport { useRecoilState, useRecoilValue, useSetRecoilState } from \"recoil\";\r\nimport { headersState, methodState, paramsState } from \"stores/requestStore\";\r\nimport { responseState } from \"stores/responseStore\";\r\nimport { historyState } from \"stores/historyStore\";\r\nimport { HistoryService } from \"../services\";\r\nimport {message} from \"../components/Common/Alert\";\r\n\r\n\r\nexport const RequestContainer: React.FC = () => {\r\n\r\n  const setResponse = useSetRecoilState(responseState);\r\n  const setHistories = useSetRecoilState(historyState);\r\n\r\n  const params = useRecoilValue(paramsState);\r\n  const headers = useRecoilValue(headersState);\r\n  const method = useRecoilValue(methodState);\r\n\r\n  const submitRequest = (requestURL: string) => {\r\n    const url = `${requestURL}${getQueryParamsOf(params)}`;\r\n\r\n    axios({ url, method, headers: getHeadersOf(headers) })\r\n      .then(data => {\r\n        HistoryService.push(url);\r\n        setHistories(HistoryService.fetchAll());\r\n        setResponse(data);\r\n      })\r\n      .catch(e => {\r\n        console.error(e.response);\r\n        message(e.toString());\r\n      });\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h2 css={titleStyle}>Request</h2>\r\n      <RequestAddress submitRequest={submitRequest} />\r\n      <RequestConfig />\r\n    </section>\r\n  );\r\n};\r\n\r\nconst titleStyle = css`\r\n  font-size: 21px;\r\n  margin: 0;\r\n  padding: 15px;\r\n  font-weight: 400;\r\n`;","import React from 'react';\r\nimport {AsideContainer} from \"./AsideContainer\";\r\nimport {ResponseContainer} from \"./ResponseContainer\";\r\nimport {RequestContainer} from \"./RequestContainer\";\r\n\r\nexport const AppContainer: React.FC = () => (\r\n  <div className=\"App\">\r\n    <AsideContainer />\r\n    <section className=\"formContainer\">\r\n      <RequestContainer />\r\n      <ResponseContainer />\r\n    </section>\r\n  </div>\r\n);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport { AppContainer } from './containers/AppContainer';\r\nimport { RecoilRoot } from \"recoil\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'highlight.js/styles/default.css';\r\n\r\nReactDOM.render(\r\n  <RecoilRoot>\r\n    <React.StrictMode>\r\n      <AppContainer />\r\n    </React.StrictMode>\r\n  </RecoilRoot>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}